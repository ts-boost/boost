# JavaScript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
executors:
    production:
        # Docker executor options.
        docker:
            - image: circleci/node:lts-buster

        # Directory in which to run the steps.
        working_directory: ~/boost

        # Set environment variables.
        # These will override any environment variables set in the CircleCI application.
        environment:
            BASH_ENV: ~/.nvm/nvm.sh

shared: &shared
    steps:
        # Install Node Version Manager.
        - run:
              name: Install Node Version Manager
              command: |
                  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash

jobs:
    # Test on LTS
    Test-LTS:
        <<: *shared
        executor: production

        # Perform these steps.
        steps:
            # Check NVM version.
            - run:
                  name: Check Current NVM Version
                  command: |
                      nvm --version

            # Install latest node version.
            - run:
                  name: Install LTS Node Version
                  command: |
                      nvm install --lts

            # Checkout source code.
            - checkout

            # Restore previously stored Yarn cache.
            - restore_cache:
                  name: Restore Yarn Package Cache
                  keys:
                      - yarn-packages-{{ checksum "yarn.lock" }}

            # Install dependencies.
            - run:
                  name: Install Dependencies
                  command: |
                      nvm use node
                      yarn install --frozen-lockfile

            # Store Yarn packack cache.
            - save_cache:
                  name: Save Yarn Package Cache
                  key: yarn-packages-{{ checksum "yarn.lock" }}
                  paths:
                      - ~/.cache/yarn

            # Run tests!
            - run:
                  name: Run Tests
                  command: |
                      nvm use default
                      yarn test

    # Test on latest.
    Test-Latest:
        executor: production

        # Perform these steps.
        steps:
            # Install Node Version Manager.
            - run:
                  name: Install Node Version Manager
                  command: |
                      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash

            # Check NVM version.
            - run:
                  name: Check Current NVM Version
                  command: |
                      nvm --version

            # Install latest node version.
            - run:
                  name: Install Latest Node Version
                  command: |
                      nvm install node

            # Checkout source code.
            - checkout

            # Restore previously stored Yarn cache.
            - restore_cache:
                  name: Restore Yarn Package Cache
                  keys:
                      - yarn-packages-{{ checksum "yarn.lock" }}

            # Install dependencies.
            - run:
                  name: Install Dependencies
                  command: |
                      nvm use node
                      yarn install --frozen-lockfile

            # Store Yarn packack cache.
            - save_cache:
                  name: Save Yarn Package Cache
                  key: yarn-packages-{{ checksum "yarn.lock" }}
                  paths:
                      - ~/.cache/yarn

            # Run tests!
            - run:
                  name: Run Tests
                  command: |
                      nvm use node
                      yarn test

workflows:
    version: 2
    Test:
        jobs:
            - Test-LTS
            # filters:
            #   # Define rules to allow/block exeution of specific branches.
            #   branches:
            #     only:
            #       - master
            - Test-Latest
            # filters:
            #   # Define rules to allow/block exeution of specific branches.
            #   branches:
            #     only:
            #       - master
